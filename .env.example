# yt-dl-sub Environment Configuration
# Copy this file to .env and customize for your environment

# =============================================================================
# CORE DEPLOYMENT CONFIGURATION
# =============================================================================

# Deployment mode: LOCAL (dev), MONOLITH (single server), DISTRIBUTED (cloud API + local workers)
DEPLOYMENT_MODE=LOCAL

# =============================================================================
# STORAGE CONFIGURATION  
# =============================================================================

# IMPORTANT: Base path for ALL file storage (downloads, transcripts, content, metadata)
# This is the ONLY place you need to change the storage location
# Can be any path on your system, including external drives or network mounts
#
# Examples:
# - Default (user home): ~/yt-dl-sub-storage
# - Local folder: /home/user/youtube-content
# - External Drive (Mac): /Volumes/External Drive/youtube-storage
# - External Drive (Linux): /mnt/external/youtube-storage  
# - External Drive (Windows): D:/youtube-storage
# - Network mount: /mnt/nas/youtube-storage
#
# Directory structure created automatically:
# {STORAGE_PATH}/
# ├── audio/         # Downloaded audio files
# ├── transcripts/   # SRT and TXT transcript files
# ├── content/       # Generated content (blog posts, social media, etc.)
# └── metadata/      # Video and processing metadata
STORAGE_PATH=/Volumes/Seagate Exp/Mac 2025/code/yt-dl-sub/downloads

# Active storage backends (comma-separated): local, gdrive, s3, gcs
STORAGE_BACKENDS=local

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================

# Database connection URL
# SQLite (recommended for LOCAL/MONOLITH): sqlite:///data/yt_dl_sub.db
# PostgreSQL: postgresql://user:password@localhost:5432/yt_dl_sub
DATABASE_URL=sqlite:///data/yt_dl_sub.db

# =============================================================================
# QUEUE CONFIGURATION
# =============================================================================

# Queue backend: sqlite (Phase 1), redis (Phase 2+)
QUEUE_TYPE=sqlite

# Redis URL (required if QUEUE_TYPE=redis)
# REDIS_URL=redis://localhost:6379/0

# =============================================================================
# WORKER CONFIGURATION
# =============================================================================

# Maximum concurrent workers (1-20)
WORKER_CONCURRENCY=3

# Maximum retry attempts for failed jobs (0-10)
MAX_RETRIES=3

# Initial retry delay in seconds
RETRY_DELAY=300

# =============================================================================
# RATE LIMITING CONFIGURATION (Unified Prevention System)
# =============================================================================

# All YouTube API interactions use the prevention system for enhanced protection
# These settings replace the legacy YOUTUBE_* rate limiting variables

# Requests per minute (5-100) - was YOUTUBE_RATE_LIMIT
PREVENTION_RATE_LIMIT=30

# Burst allowance (3-20) - was YOUTUBE_BURST_SIZE  
PREVENTION_BURST_SIZE=10

# Open circuit breaker after N consecutive 429 errors (3-10) - was YOUTUBE_MAX_FAILURES_BEFORE_STOP
PREVENTION_CIRCUIT_BREAKER_THRESHOLD=5

# Circuit breaker recovery timeout in seconds (30-300) - was YOUTUBE_COOLDOWN_MINUTES
PREVENTION_CIRCUIT_BREAKER_TIMEOUT=60

# Minimum seconds between requests (0.5-10.0)
PREVENTION_MIN_REQUEST_INTERVAL=2.0

# Exponential backoff base multiplier (1.5-3.0) - was YOUTUBE_BACKOFF_MULTIPLIER
PREVENTION_BACKOFF_BASE=2.0

# Maximum backoff delay in seconds (60-600)
PREVENTION_BACKOFF_MAX=300.0

# =============================================================================
# YOUTUBE DOWNLOAD CONFIGURATION
# =============================================================================

# Concurrent YouTube downloads (1-10) - Non-rate-limiting setting
YOUTUBE_CONCURRENT_DOWNLOADS=2

# MIGRATION NOTE: Legacy YOUTUBE_* rate limiting variables are deprecated
# Use the PREVENTION_* variables above for all rate limiting configuration

# =============================================================================
# VIDEO/AUDIO CONFIGURATION
# =============================================================================

# Default video quality: 720p, 1080p, 1440p, 2160p, best, worst
DEFAULT_VIDEO_QUALITY=1080p

# Default video format: mp4, webm, mkv
# Note: Only used when explicitly downloading video (download_audio_only=False)
# By default, the system downloads audio-only in Opus format
DEFAULT_VIDEO_FORMAT=mp4

# Default audio format for transcription: opus, mp3, wav
# This is the PRIMARY default - most downloads are audio-only
DEFAULT_AUDIO_FORMAT=opus

# =============================================================================
# TRANSCRIPTION CONFIGURATION
# =============================================================================

# Whisper model: tiny, base, small, medium, large, large-v2, large-v3
WHISPER_MODEL=base

# Restore missing punctuation in transcripts (true/false)
# Automatically adds sentence-ending punctuation to transcripts lacking it
# Particularly useful for YouTube auto-generated captions
RESTORE_PUNCTUATION=true

# Whisper device: auto, cpu, cuda
WHISPER_DEVICE=auto

# =============================================================================
# API CONFIGURATION
# =============================================================================

# API server configuration
API_HOST=0.0.0.0
API_PORT=8000

# API authentication
API_KEY_REQUIRED=false
# API_KEYS=your-api-key-1,your-api-key-2

# API rate limiting (requests per minute per client)
API_RATE_LIMIT=60

# =============================================================================
# LOGGING CONFIGURATION
# =============================================================================

# Log level: DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_LEVEL=INFO

# Log file path (optional - logs to stdout if not set)
# LOG_FILE=logs/yt-dl-sub.log

# Log rotation settings
LOG_MAX_BYTES=10000000
LOG_BACKUP_COUNT=5

# =============================================================================
# CREDENTIAL MANAGEMENT CONFIGURATION
# =============================================================================

# Path to credential vault JSON file (stores all API keys and credentials)
CREDENTIAL_VAULT_PATH=credentials/vault.json

# Active credential profile (default, personal, work, client, etc.)
# CREDENTIAL_PROFILE=default

# You can also override specific credentials with environment variables:
# Format: OVERRIDE_{SERVICE}_{FIELD}
# Examples:
# OVERRIDE_CLAUDE_API_KEY=your-claude-api-key
# OVERRIDE_GDRIVE_FOLDER_ID=your-folder-id
# OVERRIDE_AIRTABLE_BASE_ID=your-base-id

# =============================================================================
# GOOGLE DRIVE CONFIGURATION (DEPRECATED - Use Credential Vault)
# =============================================================================

# Google Drive integration (optional - now managed via credential vault)
# GDRIVE_CREDENTIALS_FILE=/path/to/service-account-key.json
# GDRIVE_FOLDER_ID=your-gdrive-folder-id

# =============================================================================
# AIRTABLE CONFIGURATION (DEPRECATED - Use Credential Vault)
# =============================================================================

# Airtable integration (optional - now managed via credential vault)
# AIRTABLE_API_KEY=your-airtable-api-key
# AIRTABLE_BASE_ID=your-airtable-base-id
# AIRTABLE_TABLE_NAME=Videos

# =============================================================================
# AI CONTENT GENERATION CONFIGURATION
# =============================================================================

# AI backend provider: claude_cli, claude_api, openai_api, gemini_api, disabled
AI_BACKEND=claude_cli

# AI model for content generation
AI_MODEL=claude-3-haiku-20240307

# Maximum tokens for AI responses
AI_MAX_TOKENS=1000

# Provider selection strategy for A/B testing
# Options: weighted_random, round_robin, performance_based, cost_optimized
PROVIDER_SELECTION_STRATEGY=weighted_random

# AI API key (OpenAI, Anthropic, etc.) - Use credential vault instead
# AI_API_KEY=your-ai-api-key

# Custom AI API base URL (optional)
# AI_BASE_URL=https://api.openai.com/v1

# Active content generators (comma-separated): blog, social, summary, newsletter
CONTENT_GENERATORS=blog,social,summary

# =============================================================================
# QUALITY MANAGEMENT CONFIGURATION
# =============================================================================

# Enable quality checks for transcripts and content
QUALITY_CHECKS_ENABLED=true

# Sample rate for quality checks (0.0-1.0, where 1.0 = check everything)
QUALITY_CHECK_SAMPLE_RATE=1.0

# Transcript quality strictness: lenient, standard, strict
TRANSCRIPT_STRICTNESS=standard

# =============================================================================
# A/B TESTING CONFIGURATION
# =============================================================================

# Statistical confidence level for A/B tests (0.80-0.99)
AB_TEST_CONFIDENCE_LEVEL=0.95

# Minimum samples before making A/B test decisions
AB_TEST_MIN_SAMPLES=100

# =============================================================================
# MONITORING CONFIGURATION
# =============================================================================

# Channel monitoring interval in seconds (minimum 60)
MONITOR_INTERVAL=300

# Health check interval in seconds (minimum 10)
HEALTH_CHECK_INTERVAL=30

# =============================================================================
# DEVELOPMENT CONFIGURATION
# =============================================================================

# Enable debug mode
DEBUG=false

# Enable testing mode
TESTING=false